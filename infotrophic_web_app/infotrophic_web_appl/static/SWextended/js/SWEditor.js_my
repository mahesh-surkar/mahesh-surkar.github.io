var TOOL_OPENED_MODE = "NONE"; //EDIT, NEW, NONE


function isJScriptAlreadyAdded(htmlDoc, JScriptName)
{
	var x = htmlDoc.getElementsByTagName("script");	
	
	for (var i=0; i<x.length; i++)
	{		
		
		var src =  x[i].src;
		//alert("Total script tags +" + src);
		
		if (src.indexOf(JScriptName) != -1)
		{
			// ... do not add header again
			return true;
		}
	}
	return false;
}

function addJScript(objHeader, JScriptName)
{
	var JScriptTag = "";

	myHTMLHead = getHeaderTags(objHeader.innerHTML);	
	parser=new DOMParser();	
	htmlDoc=parser.parseFromString(myHTMLHead, "text/html");	
//	objHeader.innerHTML = 
	
	if (!isJScriptAlreadyAdded(htmlDoc, JScriptName))
	{
		JScriptTag = '<script type="text/javascript" src="' + JScriptName + '"></script>';
	}
	
	headerString = document.createTextNode(htmlencode(htmlDoc.head.innerHTML + JScriptTag));
	objHeader.innerHTML = "";
	objHeader.appendChild(headerString);
}

function getHeaderTags(header)
{
	//alert(header);
	var htmlTag = '<HTML xmlns="http://www.w3.org/1999/xhtml">' + '\n';
    	var htmlStartTag = '<HEAD>' + '\n';
	    htmlStartTag += '<meta http-equiv="X-UA-Compatible" content="IE=Edge" />' + '\n';
        htmlStartTag += '<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />' + '\n';
        htmlStartTag += '<meta name="createTool" content="InfoTrophic SWCreator">' + '\n';
        htmlStartTag += '<meta name="displaySection" content="BLANK">'  + '\n';
	    htmlStartTag += '<meta name="author" content="BLANK">' + '\n';
        htmlStartTag += '<meta name="keywords" content="BLANK">' + '\n';
        htmlStartTag += '<meta name="description" content="BLANK">' + '\n';       
        htmlStartTag += '<TITLE>\n</TITLE>\n</HEAD>\n<BODY>\n';  
       
        if (header && header != "")
        {
        	htmlStartTag = htmlTag + htmlDecode(header) + "\n<BODY>\n";
        }
	
	return htmlStartTag;
}

function attachHTMLTags(header, content) 
{
	var htmlStartTag = getHeaderTags(header);
	var htmlEndTag = "\n</BODY>\n</HTML>";	
	//alert(htmlStartTag + content + htmlEndTag);
	return htmlStartTag + content + htmlEndTag;
}

function handleFileSelect(evt, fileData, fileHeader, fileName) {
	//alert("file selected");
	var files = evt.target.files; // FileList object
    //Loop through the FileList.
	for (var i = 0, f; f = files[i]; i++) {   
		var reader = new FileReader();
		// Closure to capture the file information.
		reader.onload = (function(theFile) {    		
			return function(e) {				
				//alert(escape(theFile.name));
				//alert(e.target.result);
				parser=new DOMParser();
				htmlDoc=parser.parseFromString(e.target.result, "text/html");
				
				//alert(htmlDoc.head.outerHTML);							
				headerString = document.createTextNode(htmlencode(htmlDoc.head.outerHTML));
				fileName.innerHTML = " " + theFile.name + " ";
				fileHeader.innerHTML = "";
				fileHeader.appendChild(headerString);
				fileData.innerHTML = htmlDoc.body.outerHTML;
				//fileData.innerHTML = e.target.result;
			};
		})(f);

		// Read in the  file as a data text.
		reader.readAsText(f);
	}
}

function getJSForTool(toolFrame)
{	
	var reqJS = "";
	//try
//	{
		if(toolFrame.contentWindow)
		{
			reqJS = toolFrame.contentWindow.getReqJsForTool();
		}
		else if(toolFrame.contentDocument)
		{
			reqJS = toolFrame.contentDocument.getReqJsForTool();
		}
/*	}
	catch (evt)
	{	
		alert("Tool JS reading Failed" + evt);
	}*/

	//alert("REQjs"+ reqJS);
	return reqJS;

}

function getHTMLCode(toolFrame, toolAPItoGenerateCode)
{
	
	//eval(toolAPItoGenerateCode + '()');
	//var el = document.getElementById('targetFrame');
	var htmlCode = "";
	if(toolFrame.contentWindow)
	{
		htmlCode = toolFrame.contentWindow.SWToolCodeGenerator();
	}
	else if(toolFrame.contentDocument)
	{
		htmlCode = toolFrame.contentDocument.SWToolCodeGenerator();
	}
	
	//alert(htmlCode);
	return htmlCode;
	
}

function attachSWToolEditCode(allowWait, toolFrame, htmlCode)
{
	if (allowWait)
	{
		//to avoid failure due to page load delay
		setTimeout(function(){attachSWToolEditCode(0, toolFrame, htmlCode)},3500);
		return;
	}
	try
	{
		if(toolFrame.contentWindow)
		{
			//alert("ok htmlCode");
			htmlCode = toolFrame.contentWindow.SWToolEditCode(htmlCode);
			return;

		}
		else if(toolFrame.contentDocument)
		{
			//alert("ok htmlCode");
			htmlCode = toolFrame.contentDocument.SWToolEditCode(htmlCode);
			return;
		}	
	}
	catch(evt) {		
		setTimeout(function(){attachSWToolEditCode(0, toolFrame, htmlCode)},350);
		return;
	}
	
	setTimeout(function(){attachSWToolEditCode(0, toolFrame, htmlCode)},350);
	//alert("edit code0");
}

function addHTMLCanvas(CKeditor, objHeader)
{
	 var canvas = '<canvas id="myCanvas" width="200" height="100" style="border:1px solid #000000;"> </canvas>';
	 addHTMLCodeToEditor(canvas, CKeditor, null,  null);
}


function openToolToEdit(editedElement, CKeditor)
{
	openTools("EDIT", editedElement, CKeditor, null);
}

function addCustomHTMLElemEvent(newElement, CKeditor)
{	
    if (typeof newElement === undefined || !newElement || newElement === "")
    {
         return;
    }       
 
	if (newElement.hasListeners("mouseover"))
	{
		if (typeof myDecoratorAdded != undefined && myDecoratorAdded)
 		{
 			var decorator = newElement.getChild(0);		
 			decorator.remove();
 			myDecoratorAdded = false;	
 			//alert("ok stlli present");
 		}
		return; //already added listeners and properties
	}		
	
	newElement.setAttribute('contenteditable','false');
	newElement.unselectable();
	/*newElement.setStyles({    		
			'-webkit-user-select' : 'none',
			'user-select' : 'none',
			'-moz-user-select' : 'none
		
	});*/
	//alert("Adding Event");
  	var alertDisplayed = false;
  	var myDecoratorAdded = false;
  	 
 	newElement.on('click', function () {
 		if (myDecoratorAdded)
 		{
 			var decorator = newElement.getChild(0);		
 			decorator.remove();
 			myDecoratorAdded = false;
 			
 			newElement.setStyles({    			
				'border' : 'none'			
			});
			
 		}
 		
		openToolToEdit(newElement, CKeditor);
	});
	
 	newElement.on('mouseover', function () {	
 		if (!myDecoratorAdded)
 		{
 			//var br = new CKEDITOR.dom.element('br');	
 			var myDecorator = new CKEDITOR.dom.element('div');	
 			var myCopy = new CKEDITOR.dom.element('button');
 			var myDelete = new CKEDITOR.dom.element('button');
 			myDecorator.append(myCopy);
 			myDecorator.append(myDelete);
 			
 			firstElem = newElement.getChild(0);
 			//alert(":"+mychildren);
 			firstElem.insertBeforeMe(myDecorator);
 			myDecoratorAdded = true;
 			//alert("count :  "+ firstElem.getIndex());
 			/*myDecorator.setStyles({    		
 				'border' : '0.1em solid #E6CCCC',
 				//'display': 'inline-block' 			
 			});	*/
 			
 		}

		newElement.setStyles({    			
			'border' : 'none'			
		});		

		newElement.setStyles({    		
			'border' : '0.1em solid #E6CCCC',
			'display': 'inline-block'
		
		});		
	});
	
	newElement.on('mouseleave', function () {
		
		if (myDecoratorAdded)
		{
			var decorator = newElement.getChild(0);		
			decorator.remove();
			myDecoratorAdded = false;
		}
		newElement.setStyles({    			
			'border' : 'none'			
		});
	});

	try
	{
			cloneElem = newElement;
	        newElement.on('drag', function () {
			if (!alertDisplayed)
			{
				if (myDecoratorAdded)
		 		{
		 			var decorator = newElement.getChild(0);		
		 			decorator.remove();
		 			myDecoratorAdded = false;
		 		}
				
				newElement.setStyles({    			
					'border' : 'none'			
				});
				
				cloneElem = newElement;				
				newElement.remove();	
		   		createAlert("Dragging not allowed!", "WARN", function () { 
					alertDisplayed=false;					
					CKeditor.insertElement(cloneElem);	

				});	//callback
		   		alertDisplayed=true;		
			}
		});

		newElement.on('drop', function () {
			alertDisplayed = false;		
			CKeditor.insertElement(cloneElem);	

		});
	}
	catch(evt)
	{
		alertDisplayed = false;		
		createAlert("Issues : Dragging not allowed!", "WARN", function () { alertDisplayed=false;} );	

	}
}

function notDragableAlert()
{
     createAlert("Dragging not allowed!", "WARN", function () {	});	//callback	
}


function removeToolWrapper(toolData)
{
	//return toolData;
	tmpData = toolData.replace(/<div class="toolCodeDecorator"> <\/div>/gi,"");
	//alert(": " + tmpData);
	return tmpData;
/*
	tmpData = toolData.replace(/<table.*>/,"").replace(/<\/table>/,"").replace(/<tbody>/,"").replace(/<\/tbody>/,"").replace(/<tr>/, "").replace(/<\/tr>/, "").replace(/<td>/, "").replace(/<\/td>/, "");
	tmpData = tmpData.replace(/<swdiv.*</,"<").replace(/<\/swdiv>/,"");
	//alert("MS2: tmp data : " +tmpData);
	return tmpData;*/
}

function toolCodeDecorator(htmlCode)
{
	return htmlCode;
	//var decoratedCode = '<div class="toolCodeDecorator"> </div>'+ htmlCode;
	//return decoratedCode;
}

function addHTMLCodeToEditor(htmlCode, CKeditor, toolName, dataElemToReplace)
{	

	var decoratedHtmlCode = toolCodeDecorator(htmlCode);
	//var generatedHtmlCode = '<swdiv swtoolname=' + toolName  +' onclick=alert("hi")> '  + decoratedHtmlCode + "</swdiv>";
	var generatedHtmlCode = '<swdiv swtoolname=' + toolName  +' > '  + decoratedHtmlCode + "</swdiv>";
	
	//alert(generatedHtmlCode);

	var tmpElement = CKEDITOR.dom.element.createFromHtml("<span> </span>", CKeditor.document);
	CKeditor.insertElement(tmpElement);

	var newElement = CKEDITOR.dom.element.createFromHtml(generatedHtmlCode, CKeditor.document);
	if (TOOL_OPENED_MODE == "EDIT")
	{
		dataElemToReplace.remove();	
	}

	CKeditor.insertElement(newElement);	

	/*var tmpElement1 = CKEDITOR.dom.element.createFromHtml("<span> </span>", CKeditor.document);
	CKeditor.insertElement(tmpElement1);	*/

	
	//alert("Element:" + newElement.getHtml());
	addCustomHTMLElemEvent(newElement, CKeditor);
}

function getCustomElements(editor) 
{
 	var nodeArray = [];

	if (!editor.document)	
	{ 
		return nodeArray;
	}
	
	var elementTag = "swdiv";
	var elements = editor.document.getBody().getElementsByTag(elementTag);	       
	//alert(elements.count());
	var counter = 0;
	for (var i = 0; i < elements.count(); ++i )
	{
		 //alert( elements.getItem(i).getName());
		var elm = elements.getItem(i);
		if (elm.hasAttributes("swtoolname"))
            	{			
			nodeArray[counter] = elm;			
			counter++;	
		}		
        }

	return nodeArray;
}

function addOnLoadElementEvtListener(editor)
{	
		var elements = getCustomElements(editor);
		//var elements = $(editor.document.getById(classesToClickListen[index])); 		
		//alert("MS:"+ elements.length);
		if (elements)
		{
			for(index1=0; index1 < elements.length; index1++)
			{
				addCustomHTMLElemEvent(elements[index1], editor);
			}
                }
	
}

function startEditMonitor(editor)
{
	var nextCheckAfter = 350;
	if (TOOL_OPENED_MODE == "NONE")
	{		
		 addOnLoadElementEvtListener(editor);			
	}

	if (!editor.document)
	{
		nextCheckAfter = 35;
	}

	setTimeout(function(){startEditMonitor(editor)}, nextCheckAfter);
}

function generateToolName(toolNameInJason)
{
	return toolNameInJason.replace(/ /g, "_");
}


function getTools(mode, toolDefDataElem, CKeditor, objHeader, OverlayCloseMe)
{

	var toolsJson = JSON.parse(SWcreatorJasonDump);
	
	var myTools = document.createElement("div");	
	var toolsSelect = document.createElement("select"); 
	var toolAPItoGenerateCode = "";
	
	toolsSelect.onchange = (function () {
		var selectedVal = toolsSelect.options[toolsSelect.selectedIndex].value;		
		var selectedPageAndTool = selectedVal.split(":");
		
		if (selectedPageAndTool[0] != "---Select Tool---" && selectedPageAndTool[0] != "")
		{
			ifrmTool.src = SWContent + "?page=" + selectedPageAndTool[0] +"&newTab=false";
			toolAPItoGenerateCode = selectedPageAndTool[1];
			toolDisplaySection.style.display = "";
		}
		else
		{
			//ifrmTool.src = "#";
			toolAPItoGenerateCode = "";
			toolDisplaySection.style.display = "none";
		}		
	});	
	
	var toolDisplayDiv = document.createElement("div");		
	toolDisplayDiv.className = "SWCreatorToolDisplay";	
	
	var toolDisplaySection = document.createElement("div");		
	toolDisplayDiv.appendChild(toolDisplaySection);
	
	ifrmTool = document.createElement("IFRAME");	
	ifrmTool.id = "ifrmTool";
	ifrmTool.style.height = "99%";
	ifrmTool.style.width = "99%";
	
	toolDisplaySection.appendChild(ifrmTool);
	
	
	var addToolBtn = document.createElement("button");
	addToolBtn.id = "addToolBtn";
	addToolBtn.innerHTML ="Add to page";
	addToolBtn.className = "btn";
	addToolBtn.onclick = (function () {
		
		var selectedVal = toolsSelect.options[toolsSelect.selectedIndex].value;		
		if (selectedVal == "---Select Tool---")
		{
			createAlert("Please Select the tool");
			return false;
		}
		else if (typeof toolAPItoGenerateCode != undefined && toolAPItoGenerateCode != "")
		{			
			var reqJS = getJSForTool(ifrmTool); //exampletool.js					
			var html = getHTMLCode(ifrmTool, toolAPItoGenerateCode); 			
			var toolName = toolsSelect.options[toolsSelect.selectedIndex].text;
			toolName = generateToolName(toolName);
			//alert("tooName: "+ toolName);
			
			if (!html || html == "")
			{
				return false;
			}
			
			if (objHeader)
			{
				addJScript(objHeader, reqJS);	
			}				
			//alert(CKeditor);
			addHTMLCodeToEditor(html, CKeditor, toolName, toolDefDataElem);				
			closeOverlay(OverlayCloseMe);
			TOOL_OPENED_MODE = "NONE";
			return true;
		}		
	});
	
	var defaultToolOption = document.createElement("option");
	defaultToolOption.text = "---Select Tool---";		
	defaultToolOption.value = "---Select Tool---";		
	toolsSelect.add(defaultToolOption);	
	
	for (var index=0; index < toolsJson.Tools.length; index++) 
	{
		var myToolOption = document.createElement("option");		
		
		if (typeof toolsJson.Tools[index].LinkPage  == undefined || toolsJson.Tools[index].LinkPage == "" 
			      || typeof toolsJson.Tools[index].AddPageSectionId  == undefined || toolsJson.Tools[index].AddPageSectionId == "")
		{
			createAlert("Tools Json is Invalid");
			return;
		}
		
		myToolOption.text = toolsJson.Tools[index].Name;
		myToolOption.value = toolsJson.Tools[index].LinkPage + ":" + toolsJson.Tools[index].ToolCodeGeneratorAPI;
		

		if (mode == "EDIT") 
		{
			var toolName = generateToolName(myToolOption.text);			
			elemToolName = toolDefDataElem.getAttribute('swtoolname');
			//alert("elemToolName: " + elemToolName);
			if (toolName == elemToolName)
			{
				defaultToolOption.text = toolsJson.Tools[index].Name;	
				defaultToolOption.value = toolsJson.Tools[index].LinkPage + ":" + toolsJson.Tools[index].ToolCodeGeneratorAPI;
			
				ifrmTool.src = SWContent + "?page=" + toolsJson.Tools[index].LinkPage +"&newTab=false";
				toolAPItoGenerateCode = toolsJson.Tools[index].ToolCodeGeneratorAPI;
			}
		}
		toolsSelect.add(myToolOption);	
	}

	myTools.appendChild(document.createTextNode("Select Tool: "));	
	myTools.appendChild(toolsSelect);	
	myTools.appendChild(addToolBtn);
	myTools.appendChild(document.createElement("br"));
	myTools.appendChild(document.createElement("br"));
	myTools.appendChild(toolDisplayDiv);
		
	if (mode != "NEW")
	{
		toolsSelect.style.display = "none";

		if (toolDefDataElem)
		{	
			var toolDefData = toolDefDataElem.getHtml();
			toolDefData = removeToolWrapper(toolDefData);	
			attachSWToolEditCode(1, ifrmTool,toolDefData);//1 to allowWait
		}
	}
	return myTools;
}

function openTools(mode, toolDefDataElem, CKeditor, objHeader)
{
	if (TOOL_OPENED_MODE != "NONE")
	{
		//createAlert("Tool Already open, Mode : " + TOOL_OPENED_MODE);
		return;
	}
	var toolsDiv = document.createElement("span");
	toolsDiv.id = "Tools";
	toolsDiv.className = "infoLabel italics overlay";
    
	
	var ToolsOverlayDiv = createOverlay(toolsDiv, "96%", false, function (status) { /*alert("closing tools"); */TOOL_OPENED_MODE = "NONE"; });	
	setOverlayTitle(ToolsOverlayDiv, "InfoTrophic Tools");

	
	var myTools = getTools(mode, toolDefDataElem, CKeditor, objHeader, ToolsOverlayDiv);
	toolsDiv.appendChild(myTools);
	TOOL_OPENED_MODE = mode;
	//alert("change tools mode : " + TOOL_OPENED_MODE);
	return ToolsOverlayDiv;
}

function closeTools(toolsOverlay)
{
	
	closeOverlay(toolsOverlay);
}

function removeEditorDefaultElements(editorData)
{
	var classesToRemove = ["copyIcon", "pasteIcon", "notifyIcon"];
	for (index=0; index < classesToRemove.length; index++)
	{
		var elements = editorData.getElementsByClassName(classesToRemove[index]);
		while(elements.length > 0)
		{
			//alert("ok" +elements[0].innerHTML)			
			elements[0].parentNode.removeChild(elements[0]);
		}
	}
}

function hideEditorSaveButton()
{
	$('.ui-dialog-buttonpane button:contains("Save")').button().hide();	
}

function createEditorOverlay(objToShow, objHeader, actionCallBack)
{
	//alert("creating Editor overlay");
	var overlayEditorDiv = document.createElement("div");
	overlayEditorDiv.name = "overlayEditorDiv";
	overlayEditorDiv.id = "overlayEditorDiv";	
	performCallbackAction = false;
	var toolsDiv;
	
	overlayEditorDiv.appendChild(objToShow);	
	objToShow.style.height =  $("#overlayEditorDiv").parent().height();
	top = "{ my: 'top', at: 'top'  }";
	
	document.body.appendChild(overlayEditorDiv);
	//myHeight = $(window).height()-105; //720;	
	myHeight = screen.height;
	var editor = attachInlineCKEditor(objToShow);

	$.widget("ui.dialog", $.ui.dialog, {
	    _allowInteraction: function(event) {
	        return !!$(event.target).closest(".cke_dialog").length || this._super(event);
	    }
	});
	
	$("#overlayEditorDiv").dialog({
		autoOpen : false,
		hide : "puff",
		closeText : "hide",
		//dialogClass : 'noTitleStuff',
		modal : true,
		title: "InfoTrophic",
		zIndex: 3999,
		//zIndex: -1,
		height : myHeight,
		width : "99%",
		position : top,
		draggable : false,
		//resizable: false,
		autoResize:false,
		//overflow : "hidden",
		closeOnEscape: false,
		stack: true,
		beforeClose : function(event, ui)
		{
			////$(this).dialog('destroy').remove();
			
		},

		close: function(event, ui)
		{
			try
			{
				if (toolsDiv)
				{
					closeTools(toolsDiv);
				}
				
				objToShow.innerHTML = editor.getData();	 
				removeEditorDefaultElements(objToShow);
				actionCallBack("CLOSE");
			}
			catch(evt)
			{
				createAlert("Failed to close tool, donot use ESC : " + evt);
			}
		
			$(this).dialog('destroy').remove();	
			
		},

		buttons: 
		{	
			"Canvas" : {
				//class: "smallbutton",
				id: "canvasButton",
				name: "canvassButton",
				//icons: { primary: 'ui-icon-disk'  },
				text: "Canvas",
				title: "Canvas",				 
				click: function () { 
				    var myCanvas = addHTMLCanvas(editor, objHeader);
				}     
			},
			
			"Tools" : {
				//class: "smallbutton",
				id: "toolsButton",
				name: "toolsButton",
				//icons: { primary: 'ui-icon-disk'  },
				text: "Tools",
				title: "Tools",				 
				click: function () { 
				    toolsDiv = openTools("NEW", null, editor, objHeader);
				}     
				
			},
			
			"Save": {   				
				//class: "smallbutton",
				id: "saveButton",
				name: "saveButton",
				//icons: { primary: 'ui-icon-disk'  },
				text: "Save",
				title: "Save",				 
				click: function () {
					objToShow.innerHTML = editor.getData();	
					removeEditorDefaultElements(objToShow);
					actionCallBack("SAVE");
				}     
				
			},
			
			"Done": {
				id: "doneButton",
				name: "doneButton",
				//icons: { primary: 'ui-icon-disk'  },
				text: "Done",
				title: "Done",
				click: function () {
					performCallbackAction = true;
					toggleScreeen("ExitFullScreen");
					$(this).dialog("close");
				}
			},
			
		}
	}).fadeIn(300);
/*	try
	{
		setTimeout(function(){editor.replace('ckedt-hiddenForms')},350);
	}
	catch(evt)
	{
		
	}*/
	

	$("#overlayEditorDiv").dialog("open");
	editor.config.height = "82%";     
	$(".ui-dialog-titlebar").hide();
	objToShow.focus();	
        
	origDocumentHeight = $(window).height()-105; //720;	
	$(".ui-dialog-titlebar-close").css('visibility','hidden');
	//alert(origDocumentHeight);
	
	if (toggleScreeen("BecomeFullScreen") == 0) 
	{
		/*no change*/ $("#overlayEditorDiv").dialog("close"); 
	}
	else
	{
		fullScreenChangeDetect(origDocumentHeight, overlayEditorDiv, function (isFullScreen)
				{ if (!isFullScreen) { $("#overlayEditorDiv").dialog("close"); } });
	}
}

function attachInlineCKEditor(i_elem)
{
	
	/*for(var instanceName in CKEDITOR.instances) {
		   alert("instance detacher : " + instanceName);
		   var editor1 = CKEDITOR.instances[instanceName];
		   editor1.destroy();
		   editor1 = null;
	}*/

	i_elem.contentEditable = "true";
	var editor;

   	editor = CKEDITOR.replace(i_elem.id , {
		// Allow some non-standard.
		//extraAllowedContent: 'a(documentation);abbr[title];code',
		removePlugins: 'preview, print, save, about, elementspath, newpage, maximize',
		extraPlugins: 'mathjax',
		extraAllowedContent: 'svg,rect*, g*, swdiv',
		//extraAllowedContent: 'strong[onclick]',
		//extraPlugins: 'sourcedialog',
		// Show toolbar on startup (optional).
		startupFocus: true
	 });
	

   //CKEDITOR.config.removeFormatTags = 'swdiv, div';
   //CKEDITOR.config.protectedSource.push( /<swdiv[\s\S]*?\/swdiv>/g );   // custom tag

   CKEDITOR.config.enterMode = CKEDITOR.ENTER_DIV; // inserts `<div></div>`
   CKEDITOR.config.allowedContent = true;
   CKEDITOR.config.resize_enabled = false;
   CKEDITOR.config.mathJaxLib = '//cdn.mathjax.org/mathjax/2.2-latest/MathJax.js?config=TeX-AMS_HTML';
   CKEDITOR.config.title = false;
   CKEDITOR.config.allowedContent = true;
   CKEDITOR.config.toolbar = 'Full';
   CKEDITOR.config.uiColor = '#E6CCCC';  
   CKEDITOR.config.baseFloatZIndex = 9000;
    
    //CKEDITOR.config.width = '75%';   // CSS unit (percent).        
    editor.on('instanceReady',
		      function( evt )
		      {
		         var editor = evt.editor;
		         //editor.execCommand('maximize');
		         // alert("event created");
		         addOnLoadElementEvtListener(editor);
		         startEditMonitor(editor);
		      });
    
   /* editor.on('blur',
		      function( evt )
		      {
		         var editor = evt.editor;
		         //editor.execCommand('maximize');
		         // alert("event created");
		         alert("Edior drstroy");
		      });*/

  //  CKEDITOR.config.removePlugins = 'maximize';	
    return editor;
}

function addContainer(i_insertAfterNode)
{
	var container = document.createElement("div");		
	insertNodeAfter(container, i_insertAfterNode);

	var element = getElement();	
	var elementHeader = getElementHeader();	
	
	HTMLContentLabel = document.createElement("div");
	HTMLContentText = document.createTextNode("Add/Edit contents below: ");
	HTMLFileName = document.createElement("span");
	HTMLFileName.innerHTML = "";
	
	HTMLContentLabel.appendChild(HTMLContentText);
	HTMLContentLabel.appendChild(HTMLFileName);
	
	HTMLContentLabel.className = "infoLabel italics";	
	
	
	var newContainerAdder = getContainorAdder(container);
	var elementDecorator = getElementDecorator(element, elementHeader, HTMLFileName, container, newContainerAdder);

	HTMLContentLabel.appendChild(elementDecorator);
	container.appendChild(HTMLContentLabel);
	container.appendChild(elementHeader);
	
	
	
	//container.appendChild(document.createElement("hr"));
	container.appendChild(element);
	container.appendChild(document.createElement("hr"));
	//attachInlineCKEditor(element);
	container.appendChild(newContainerAdder);	
	return container;
}


function getElementOpener(i_elemToOpenIn, i_elemHeaderToOpenIn, i_fileName)
{
	return getFileOpener(i_elemToOpenIn, i_elemHeaderToOpenIn, i_fileName);
}

function getElementSaver(i_element, i_header, i_fileName)
{	
	var fileSaveBtn = document.createElement("button");
	var saveOverlay = "";
	fileSaveBtn.id = "fileSaveBtn";
	fileSaveBtn.className = "btn";
	fileSaveBtn.innerHTML = "Save";
	fileSaveBtn.onclick = (function () { 
		if (saveOverlay != "" )
		{
			closeOverlay(saveOverlay);
			saveOverlay = "";
		}
		saveOverlay = saveHTMLFile(i_element, i_header, i_fileName); 

	});	
	return fileSaveBtn;	
}

function saveHTMLFile(content, header, fileName)
{	
	//var filesystem = null;

	//alert(content);
	//var fileName = prompt("Please enter file name to save:");
	
	/*var blob = new Blob([content], {type: "text/plain;charset=utf-8"});
	saveAs(blob, fileName);*/
    /*var a = document.createElement("a");
	document.body.appendChild(a);
	var file = new Blob([content], {type: "text/html;charset=utf-8"});
	a.href = URL.createObjectURL(file);
	a.download = fileName;
	a.click();*/

	//////////////////////////////////////////////
	// assumes variable data, which is a homogenous collection of objects

	
	

	// trick browser into downloading file
	/*var uriContent = "data:application/octet-stream," + encodeURIComponent(content);
	var myWindow = window.open(uriContent, "Nutrient CSV");
	myWindow.focus();*/
	
	
	
	////////////
	
	var tmp = document.createElement("div");
        tmp.id = "tmp";

	var fileNameContainor = document.createElement("span");
	fileNameContainor.className = "infoLabel italics overlay";
	fileNameContainor.appendChild(document.createTextNode("File Name : "));
	
	var myFileName = document.createElement("input");
	myFileName.type = "text";
	myFileName.className = "infoLabel italics overlay";
	myFileName.placeholder = "Type file name (.html)";
	myFileName.value = fileName.innerHTML;
	fileNameContainor.appendChild(myFileName);
	
	var saveToGoogleDriveBtn = document.createElement("button");
	saveToGoogleDriveBtn.id = "saveToGoogleDriveBtn";
	saveToGoogleDriveBtn.innerHTML = "Save to google drive";
	
	//google oauth ID
	//650656389951-6dg5k7qkddql0p0jl5miljq6mbsr2l4j.apps.googleusercontent.com
	//google secreat key
	//jZtkE56Djk5KYqtgrKpqrmdm
	//saveToGoogleDriveBtn.className="g-savetodrive";
	//	saveToGoogleDriveBtn.data-src="//example.com/path/to/myfile.pdf";
	//		saveToGoogleDriveBtn.data-filename="My Statement.pdf";
		//		saveToGoogleDriveBtn.data-sitename="My Company Name";

	saveToGoogleDriveBtn.onclick = (function () {           
		saveFileToGoogleDrive();
		
	});
	
	var saveButton = document.createElement("p");
	saveButton.id = "saveButton";
	
	saveButton.innerHTML = "You must have Flash 10 installed to save file localy.";	
	infoMessage = document.createElement("span");
	infoMessage.innerHTML = "Click above button to save the file.";
	infoMessage.id ="infoMessage";
	infoMessage.className = "infoLabel italics overlay";
	
	tmp.appendChild(fileNameContainor);		
	tmp.appendChild(document.createElement("br"));
	tmp.appendChild(saveToGoogleDriveBtn);
	tmp.appendChild(saveButton);
	tmp.appendChild(infoMessage);
			
	var overlayDiv = createOverlay(tmp, "355", false, function(status) { /*on close callback function do nithing*/});
	Downloadify.create(saveButton, {
	   filename: function(){
		   //return document.getElementById('filename').value;
		   return myFileName.value.trim();//fileName;
	    },
	    
	    data: function(){ 		
		  var mycontent = attachHTMLTags(header.innerHTML, content.innerHTML);
		  return mycontent;
	   },
	
       onComplete: function(){ 
    	       return function(infoMessage, fileame, myFileName, overlayDiv){
    	    	   infoMessage.className = "infoLabel italics overlay";
    	    	   infoMessage.innerHTML = "File Saved!";
    	    	   fileName.innerHTML = myFileName.value;
    	    	   
    	    	}(infoMessage, fileName, myFileName, overlayDiv);
    	  
       },	
	   onCancel: function(){  
		        return function(infoMessage){
		        	infoMessage.className = "warnLabel italics overlay";
		        	infoMessage.innerHTML = "File save canceled."; 
		         }(infoMessage);
	   },
		  
	   onError: function(){ 
		      return function(infoMessage){
		    	    infoMessage.className = "warnLabel italics overlay";
			        infoMessage.innerHTML = "Cannot save empty file!";
		      }(infoMessage);	   
	   },
	
	   transparent: false,
	   swf: 'static/Downloadify/media/downloadify.swf',
	   downloadImage: 'static/Downloadify/images/download.png',
	
	   width: 110,//45,
	   height: 30,//15,
	
	   transparent: true,
	   append: false
    });
	
	return overlayDiv;
	/*
	//var exportButton = $( "#fileSaveBtn");
	var exportButton = $( "#" + downloadElement.id);

	var exportButtonWidth = exportButton.outerWidth();
	var exportButtonHeight = exportButton.outerHeight();

	var flashObject = $( '[name^="downloadElement"]' );

	
	// Set the Flash object to the same size as my button
	flashObject.css( { width: exportButtonWidth, height: exportButtonHeight } );

	var exportButtonPosition = flashObject.position();
	//alert(flashObject.top());
	
	if (exportButtonPosition)
	{
		// Set my button directly underneath the Flash object
		exportButton.css( 
				{ 
					top: exportButtonPosition.top, 
					left: exportButtonPosition.left,					
					position: 'absolute', 'z-index': -1
				});
	}
	*/
}


function getFileOpener(i_elemToOpenIn, i_elemHeaderToOpenIn, i_fileName, i_fileReadNotifyCallback)
{
	var fileOpenBtn = document.createElement("button");
	fileOpenBtn.id = "fileOpenBtn";
	fileOpenBtn.innerHTML = "Open";
	fileOpenBtn.onclick = (function () { readFile(i_elemToOpenIn, i_elemHeaderToOpenIn, i_fileName, i_fileReadNotifyCallback); });
	
	return fileOpenBtn;
}


function readFile(i_objToAttachFile, i_elemHeaderToOpenIn, i_fileName, i_fileReadNotifyCallback)
{
	//alert(":reading file");
	var fileInputDiv = document.createElement("div");
	fileInputDiv.id = "fileInputDiv";	

	fileLabelSpan = document.createElement("span");
	fileLabelSpan.appendChild(document.createTextNode("Select the File: "));
	fileLabelSpan.className = "infoLabel italics overlay";
	
	
	
	fileInputDiv.appendChild(fileLabelSpan);
	fileInputDiv.appendChild(document.createElement("br"));
	fileInputDiv.appendChild(document.createElement("br"));
	
	var fileInput = document.createElement("input");        
	fileInput.type = "file";
	fileInput.id = "files";
	fileInput.className = "overlay";
	fileInputDiv.appendChild(fileInput);
	
	var selectFromGoogleDriveBtn = document.createElement("button");
	selectFromGoogleDriveBtn.id = "selectFromGoogleDriveBtn";
	selectFromGoogleDriveBtn.innerHTML = "Select from google drive";
	
	fileInputDiv.appendChild(selectFromGoogleDriveBtn);
	
	
	//
	//var fileAddBtn = document.createElement("button");
	//fileAddBtn.id = "fileAddBtn";
	//fileAddBtn.innerHTML = "Add";
	//fileInputDiv.appendChild(fileAddBtn);
	
	var fileData = document.createElement("span");
	

	var myOverlayDiv = createOverlay(fileInputDiv, "420", false, function (status)
			{ 
		        if (status == "OK_CLOSE") 
		        {
		        	i_objToAttachFile.innerHTML = i_objToAttachFile.innerHTML.trim();	  //callback fucion for close overlay
		        	// alert(i_objToAttachFile.innerHTML);
		        }
			});
	
	fileInput.addEventListener('change', function (evt) { 
		                handleFileSelect(evt, i_objToAttachFile, i_elemHeaderToOpenIn, i_fileName); 
		                $("#" + myOverlayDiv.id ).dialog("close"); 
		                if (i_fileReadNotifyCallback)
		                {
		                	waitSleepFileRead(1000, i_fileReadNotifyCallback);
		                }
	}, false);
	
	attachSelectFileFromGoogleDrive("selectFromGoogleDriveBtn", function (fileName) { 
        				//handleFileSelect(evt, i_objToAttachFile, i_elemHeaderToOpenIn, i_fileName); 
        				$("#" + myOverlayDiv.id ).dialog("close"); 
        				i_fileName.innerHTML = " " + fileName + " ";
        				
        				if (i_fileReadNotifyCallback)
        				{
        					waitSleepFileRead(1000, i_fileReadNotifyCallback);
        				}
				});

}

function waitSleepFileRead(waitTime, i_fileReadNotifyCallback)
{
	setTimeout(i_fileReadNotifyCallback, waitTime); 
}
